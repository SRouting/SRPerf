#!/bin/bash
###############################################
####### some definitions for the script #######
###############################################

# this script assumes that the server is c220-g1

get_irq_min_max()
{
	local intf="$1"
	local irq_list
	local min
	local max

	if [ -z "${intf}" ]; then
		printf "Interface name is not valid.\n"
		exit 1
	fi

	irq_list="$(cat /proc/interrupts | grep -E "${intf}-TxRx-*" | sed -E 's/[ \t]*([0-9]+):.*/\1/g' | sort -n)"
	min="$(echo "${irq_list}" | sed -E 's/\s+/\n/g' | head -n 1)"
	max="$(echo "${irq_list}" | sed -E 's/\s+/\n/g' | tail -n 1)"

	echo "${min}:${max}"
	return 0
}


LOGIN_USER="carmine"
PUB_CERT="../../orchestrator/id_rsa.pub"
PUB_CERT_USER="anyone@allnodes"
AUTH_KEYS="/users/${LOGIN_USER}/.ssh/authorized_keys"

SUT_HT_cpu_offline_list="16 31"

# TODO: we need to check the processor topology

# Change the IRQ core looking at the HW topology
SUT_irq_core=7

SUT_rcv_iface_name="enp6s0f0"
SUT_rcv_iface_ipv4_addr="10.10.1.2"
SUT_rcv_iface_ipv4_plen="24"
SUT_rcv_iface_ipv6_addr="12:1::2"
SUT_rcv_iface_ipv6_plen="64"
SUT_rcv_iface_mac="00:00:00:00:22:11"
SUT_rcv_iface_irq_min=93
SUT_rcv_iface_irq_max=124
SUT_rcv_iface_irq_core=8

SUT_snd_iface_name="enp6s0f1"
SUT_snd_iface_ipv4_addr="10.10.2.2"
SUT_snd_iface_ipv4_plen="24"
SUT_snd_iface_ipv6_addr="12:2::2"
SUT_snd_iface_ipv6_plen="64"
SUT_snd_iface_mac="00:00:00:00:22:22"
SUT_snd_iface_irq_min=127
SUT_snd_iface_irq_max=158
SUT_snd_iface_irq_core=8

TG_rcv_iface_mac_addr="00:00:00:00:11:22"
TG_rcv_iface_ipv4_addr="10.10.2.1"
TG_rcv_iface_ipv4_plen="24"
TG_rcv_iface_ipv6_addr="12:2::1"
TG_rcv_iface_ipv6_plen="64"

SUT_2nd_rt_name="rt2"
SUT_2nd_rt_num="100"

srext_oif_name="veth1"
srext_iif_name="veth2"
srext_oif_mac="00:00:00:00:00:AA"
srext_iif_mac="00:00:00:00:00:BB"

#Configure interfaces
ifconfig ${SUT_rcv_iface_name} up
ifconfig ${SUT_rcv_iface_name} hw ether ${SUT_rcv_iface_mac}
ip -6 addr add ${SUT_rcv_iface_ipv6_addr}/${SUT_rcv_iface_ipv6_plen} dev ${SUT_rcv_iface_name}

ifconfig ${SUT_snd_iface_name} up
ifconfig ${SUT_snd_iface_name} hw ether ${SUT_snd_iface_mac}
ip -6 addr add ${SUT_snd_iface_ipv6_addr}/${SUT_snd_iface_ipv6_plen} dev ${SUT_snd_iface_name}

#Enable forwarding
sysctl -w net.ipv4.conf.all.forwarding=1
sysctl -w net.ipv6.conf.all.forwarding=1
echo 1 > /proc/sys/net/ipv6/seg6_flowlabel

#Configure static ARP
arp -s ${TG_rcv_iface_ipv4_addr} ${TG_rcv_iface_mac_addr}

#Configure IPv6 neightbors
sudo ip -6 neigh add ${TG_rcv_iface_ipv6_addr} lladdr ${TG_rcv_iface_mac_addr}  dev ${SUT_snd_iface_name}

#Disable NIC Offloading features
ethtool -K ${SUT_rcv_iface_name} gro off
ethtool -K ${SUT_rcv_iface_name} gso off
ethtool -K ${SUT_rcv_iface_name} tso off
ethtool -K ${SUT_rcv_iface_name} lro off
ethtool -K ${SUT_rcv_iface_name} rx off tx off

ethtool -K ${SUT_snd_iface_name} gro off
ethtool -K ${SUT_snd_iface_name} gso off
ethtool -K ${SUT_snd_iface_name} tso off
ethtool -K ${SUT_snd_iface_name} lro off
ethtool -K ${SUT_snd_iface_name} rx off tx off

#SREXT
#depmod -a
#ip link add ${srext_oif_name} type veth peer name ${srext_iif_name}

#ifconfig ${srext_oif_name} up
#ifconfig ${srext_iif_name} up

#ifconfig ${srext_oif_name} hw ether ${srext_oif_mac}
#ifconfig ${srext_iif_name} hw ether ${srext_iif_mac}

# Create a secondary routing table
# echo $SUT_2nd_rt_num ${SUT_2nd_rt_name} >> /etc/iproute2/rt_tables

systemctl stop irqbalance

# Assign affinity of receive queues
echo "setting irqs=[${SUT_rcv_iface_irq_min}:${SUT_rcv_iface_irq_max}] for interface ${SUT_rcv_iface_name}"
for (( c=$SUT_rcv_iface_irq_min; c<=$SUT_rcv_iface_irq_max; c++ ))
do
        sudo bash -c 'echo '${SUT_rcv_iface_irq_core}' > /proc/irq/'${c}'/smp_affinity'
done

for (( c=$SUT_snd_iface_irq_min; c<=$SUT_snd_iface_irq_max; c++ ))
do
        sudo bash -c 'echo '${SUT_snd_iface_irq_core}' > /proc/irq/'${c}'/smp_affinity'
done
